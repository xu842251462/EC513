#
# Copyright (C) 2012-2021 Intel Corporation.
# SPDX-License-Identifier: MIT
#

##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################

MYDEFINES := -g

##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := branch-predictor

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS := 

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

###### Place architecture-specific definitions here ######

# Place ia32-specific definitions here if they apply to all supported operating systems.
#ifeq ($(TARGET),ia32)
#    TEST_TOOL_ROOTS += emuload
#endif

# Place intel64-specific definitions here if they apply to all supported operating systems.
#ifeq ($(TARGET),intel64)
#    TEST_TOOL_ROOTS += inscount2_vregs
#endif

###### Place OS-specific definitions here ######

# Linux
#ifeq ($(TARGET_OS),linux)
#    TEST_ROOTS += get_source_location_gnu_debug
#    APP_ROOTS += get_source_app_gnu_debug
#    ifeq ($(TARGET),intel64)
#        TEST_TOOL_ROOTS += fence
#    endif
#endif

# macOS*
#ifeq ($(TARGET_OS),mac)
#endif

###### Handle exceptions here (OS/arch related) ######



RUNNABLE_TESTS := $(TEST_TOOL_ROOTS) $(TEST_ROOTS)


###### Define the serial subset ######

###### Define the sanity subset ######

# This defines the list of tests that should run in sanity. It should include all the tests listed in
# TEST_TOOL_ROOTS and TEST_ROOTS excluding only unstable tests.


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test

# -dwarf_file is not supported on Windows.
#regval.test: $(OBJDIR)regval$(PINTOOL_SUFFIX) $(OBJDIR)regval_app$(EXE_SUFFIX)
#	$(PIN) -t $(OBJDIR)regval$(PINTOOL_SUFFIX) -o $(OBJDIR)regval.out -- $(OBJDIR)regval_app$(EXE_SUFFIX)
#	$(RM) $(OBJDIR)regval.out

##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

###### Special tools' build rules ######

$(OBJDIR)branch-predictor${OBJ_SUFFIX}: branch-predictor.cpp
	$(CXX) ${MYDEFINES} ${COPT} $(TOOL_CXXFLAGS) $(CXXFLAGS) $(TOOL_INCLUDES) $(PIN_CXXFLAGS) ${COMP_OBJ}$@ $<

$(OBJDIR)branch-predictor$(PINTOOL_SUFFIX): $(OBJDIR)branch-predictor$(OBJ_SUFFIX) #$(CONTROLLERLIB)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS)


###### Special applications' build rules ######

# This application needs to be compiled without optimizations for the placeholder functions to be available to the tool.
